#include <Adafruit_Fingerprint_new.h>
#include <string.h>
#include <stdint.h>
#define myserial Serial2

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&myserial);
size_t convert_hex(uint8_t *dest, size_t count, const char *src) {
    char buf[3];
    size_t i;
    int value;
    for (i = 0; i < count && *src; i++) {
        buf[0] = *src++;
        buf[1] = '\0';
        if (*src) {
            buf[1] = *src++;
            buf[2] = '\0';
        }
        if (sscanf(buf, "%x", &value) != 1)
            break;
        dest[i] = value;
    }
    return i;
  }
int p;
void setup() {

  Serial.begin(9600);
  char * tos;
  char la [4096]="";
  char packet2_st [257];
  char packet3_st [257];
  char packet4_st [257];
  char packet5_st [257];  
  uint8_t packet2 [] = {0x03, 0x03, 0x5E, 0x16, 0x00, 0x01, 0x20, 0x01, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xCF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xAB, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xA6, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  uint8_t packet3 [] = {0x13, 0xEB, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x54, 0x8F, 0x65, 0x3E, 0x42, 0x12, 0xEA, 0x1E, 0x52, 0x9B, 0xA8, 0xBE, 0x13, 0x1E, 0xDB, 0x3E, 0x3B, 0xB1, 0x41, 0x3E, 0x41, 0xBB, 0x01, 0xDE, 0x74, 0xC1, 0xEA, 0xFE, 0x62, 0xC2, 0x40, 0xBE, 0x70, 0x13, 0xE5, 0x7F, 0x4F, 0xA5, 0xAA, 0x7F, 0x3A, 0x26, 0x58, 0x7F, 0x61, 0x2F, 0xAA, 0x5F, 0x43, 0x34, 0xD8, 0xBF, 0x2B, 0x3B, 0xC2, 0xFF, 0x51, 0x3F, 0xEC, 0xBF, 0x2A, 0x0D, 0xDC, 0xBC, 0x25, 0x10, 0x44, 0x1C, 0x41, 0xC2, 0x00, 0x5D, 0x48, 0x41, 0x16, 0xFB, 0x40, 0x0A, 0x27, 0x36, 0x40, 0x04, 0xA6, 0x12, 0x3F, 0x07, 0x9B, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  uint8_t packet4 [] = {0x25, 0x41, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  uint8_t packet5 [] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x03, 0x03, 0x57, 0x24, 0x00, 0x01, 0x20, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x7B, 0x00, 0x00, 0x30, 0xCC, 0xC3, 0xFF, 0xCF, 0x3C, 0xFF, 0xFC, 0xFF, 0xFF, 0xFE, 0xFA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x99, 0x65, 0x55, 0x56, 0x55, 0x45, 0x55, 0x45, 0x14, 0x01, 0x54, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  char buffer_la[3]="";
  //strcat(la
  int i = 0;
  int j = 0;
  int k = 0;
  int l = 0;  

  for (i=0;i<1024;i++){
    if (i<256){
      packet2_st[k]=la[i];
    }else if (i<512){
      packet3_st[k]=la[i];      
    }else if (i<768){
      packet4_st[k]=la[i];
    }else {
      packet5_st[k]=la[i];
    }
    k++;
    if(k%256==0){
      k=0;
    }

  }  

  /*convert_hex(packet2,2,packet2_st);
  convert_hex(packet3,2,packet3_st);
  convert_hex(packet4,2,packet4_st);
  convert_hex(packet5,2,packet5_st);*/

  /*for(i=0;i<1024;i++){
    buffer_la[j]=la[i];
    if (j==0){
      j++;
    }else{
      //Serial.print(buffer_la);
      //Serial.print(" = ");
      //uint8_t po = (uint8_t)strtol(buffer_la, NULL, 16);
      //Serial.println(po);
      if (l==128){
        k++;
        l=0;        
      }
      switch (k){
        case 0:
          packet2[l] = (uint8_t)strtol(buffer_la, NULL, 16);
          break;
        case 1:
          packet3[l] = (uint8_t)strtol(buffer_la, NULL, 16);
          break;
        case 2:
          packet4[l] = (uint8_t)strtol(buffer_la, NULL, 16);

          break;
        case 3:
          packet5[l] = (uint8_t)strtol(buffer_la, NULL, 16);
          break;

      }
      l++;
      j=0;      
    }
  }*/


  for(i=0;i<128;i++){
    Serial.print(packet2_st[i]);
    Serial.print(",");
  }
  Serial.println("bruhh");
    for(i=0;i<128;i++){
    Serial.print(packet3_st[i]);
    Serial.print(",");
  }
  Serial.println("bruhh");
    for(i=0;i<128;i++){
    Serial.print(packet4_st[i]);
    Serial.print(",");
  }
  Serial.println("bruhh");
    for(i=0;i<128;i++){
    Serial.print(packet5_st[i]);
    Serial.print(",");
  }
  Serial.println("bruhh");

  //Initialize FIngerprint Sensor
  finger.begin(9600);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1);
  }

  //Empty Database
  finger.emptyDatabase();
  Serial.println("Now database is empty :)");

  //UPload data to fingerprint sensor
  Serial.print("\n===> Write Packet");
  p = finger.uploadModelPercobaan(packet2, packet3, packet4, packet5);		// Simpan di Char Buffer 01      
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println(" SUKSES");
      Serial.read();
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");

    case FINGERPRINT_BADPACKET:
      Serial.println("Bad packet");

	{
	Serial.println("\n==>[SUKSES] UploadModel = ");
      //return p;
	}
  }
  int id = 5;		// --> id = FlashMemory Place
  Serial.print("\n==>[SUKSES] StoreModel + ID = ");Serial.print(id);
  p = finger.storeModel(id);									// taruh di ID = 0 pada flash memory FP
  if (p == FINGERPRINT_OK) {
    Serial.println(" Stored!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");

  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");

  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");

  } else {
    Serial.println("Unknown error");
  }
}
//packet1[i]=(uint8_t)strtol(tos, NULL, 16);
void loop() {
  // put your main code here, to run repeatedly:

}
